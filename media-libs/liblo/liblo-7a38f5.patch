diff -rupN liblo-0.27.old/lo/lo_macros.h liblo-0.27/lo/lo_macros.h
--- liblo-0.27.old/lo/lo_macros.h	2012-03-27 19:04:06.000000000 -0400
+++ liblo-0.27/lo/lo_macros.h	2013-10-27 23:13:51.318346646 -0400
@@ -36,13 +36,8 @@ extern "C" {
 
 /* an internal value, ignored in transmission but check against LO_MARKER in the
  * argument list. Used to do primitive bounds checking */
-#ifdef __LP64__
-#	define LO_MARKER_A (void *)0xdeadbeefdeadbeef
-#	define LO_MARKER_B (void *)0xf00baa23f00baa23
-#else /*__LP64__*/  
-#	define LO_MARKER_A (void *)0xdeadbeef
-#	define LO_MARKER_B (void *)0xf00baa23
-#endif
+#define LO_MARKER_A (void *)0xdeadbeefdeadbeefL
+#define LO_MARKER_B (void *)0xf00baa23f00baa23L
 
 #define LO_ARGS_END LO_MARKER_A, LO_MARKER_B
 
diff -rupN liblo-0.27.old/src/message.c liblo-0.27/src/message.c
--- liblo-0.27.old/src/message.c	2013-05-13 15:24:12.000000000 -0400
+++ liblo-0.27/src/message.c	2013-10-27 23:15:30.786867373 -0400
@@ -250,7 +250,9 @@ int lo_message_add_varargs_internal(lo_m
     }
 #ifndef USE_ANSI_C
     void *i = va_arg(ap, void *);
-    if (i != LO_MARKER_A) {
+    if (((unsigned long)i & 0xFFFFFFFFUL)
+	!= ((unsigned long)LO_MARKER_A & 0xFFFFFFFFUL))
+    {
         ret = -2;               // bad format/args
         fprintf(stderr,
                 "liblo error: lo_send, lo_message_add, or lo_message_add_varargs called with "
@@ -260,7 +262,9 @@ int lo_message_add_varargs_internal(lo_m
         return ret;
     }
     i = va_arg(ap, void *);
-    if (i != LO_MARKER_B) {
+    if (((unsigned long)i & 0xFFFFFFFFUL)
+        != ((unsigned long)LO_MARKER_B & 0xFFFFFFFFUL))
+    {
         ret = -2;               // bad format/args
         fprintf(stderr,
                 "liblo error: lo_send, lo_message_add, or lo_message_add_varargs called with "
